#!/usr/bin/env zsh
#####################################################################################
# TODO:
#
#   * Make a zsh completion file?  Shouldn't be hard to just refer zsh to
#     aptitude for completion, maybe even embedding that process in this file,
#     for no external dependencies.
#
#   * CONSIDER, in the case apti is run w/o a subcommand, and exactly one
#     result is returned, go ahead and do 'show'?  (No; *offer* to.  And ignore
#     whether the search was explicit.)
#
#   * If apti is explicitly given a command that requires sudo, Switch to it
#     before proceeding.  In other words, if it turns out that sudo is
#     required, offer to try it, instead of letting aptitude report permission
#     errors.
#
#####################################################################################

# NAME
#         apti-sapti - Run aptitude and "Do what I mean".
#
#
# SYNOPSIS
#         apti [<options>] [<subcommand>] <package>
#
#         sapti [<options>] [<subcommand>] <package>
#
#
#         <options> - options to be passed to aptitude
#
#         <subcommand>  - aptitude subcommand (ex. search, install, autoclean...)
#
#         <package> - package name (or search string, if searching)
#
#
# DESCRIPTION
#
#         When called as `apti`, run `aptitude` with a default subcommand of 'search'.
#
#         When called as `sapti`, run 'sudo aptitude' with a default subcommand of
#         'install'.
#
#         In both cases, also use preset options as 'sane defaults'
#
#         NOTE: For proper functionality, create two symbolic links, named
#         'apti' and 'sapti' to this script:
#
#             $ ln -s <this script> apti
#             $ ln -s <this script> sapti
#
#
# EXAMPLE TRANSLATIONS (options not shown):
#
#         apti <string>             => aptitude search <string>
#
#         sapti <package>           => sudo aptitude install <package>
#
#         apti show <package>       => aptitude show <package>
#
#         sapti search <package>    => sudo aptitude search <package>
#

############################################################################
# CONFIGURE STANDARD OPTIONS HERE #
###################################
#
# This next assignment determines the default options that any invocation of
# this script will use when running aptitude
#
#  NOTE: We set options as an array instead of a string, for use as part of a
#  command.  Further reading:
#    http://www.cs.elte.hu/zsh-manual/FAQ03.html#l17
############################################################################
standard_options=(

    --prompt            # Always display a prompt

    --with-recommends   # Treat recommendations as dependencies

    --show-deps         # show brief explanations of automatic installations
                        # and removals
)
############################################################################

function usage() {
    cat <<-ENDHERE

    USAGE

         apti-sapti - Run aptitude and "Do what I mean".

         Run 'aptitude' and assume the subcommand 'search':
            $ apti [<options>] [<subcommand>] <package>

         Run 'sudo aptitude' and assume the subcommand 'install':
            $ sapti [<options>] [<subcommand>] <package>

    PARAMETERS
         <options>
            options to be passed to aptitude

         <subcommand>
            aptitude subcommand (ex. search, install, autoclean...)
            If this parameter is not given, then a default will be chosen based
            on how this script was invoked -- the 'search' subcommand will be
            used if this script was run as 'apti', and 'install' will be used
            if run as 'sapti'.

         <package>
            package name (or search string, if searching)

ENDHERE
}

# How were we called (apti or sapti)?
invoking_command=$(basename $0)

aptitude_subcommands=(
    "install"
    "remove"
    "purge"
    "hold"
    "unhold"
    "markauto"
    "unmarkauto"
    "forbid-version"
    "update"
    "safe-upgrade"
    "full-upgrade"
    "build-dep"
    "forget-new"
    "search"
    "show"
    "versions"
    "clean"
    "autoclean"
    "changelog"
    "download"
    "reinstall"
    "why"
    "why-not"
);

# If a subcommand was specified, use it.
if [[ -n $1 && (${aptitude_subcommands[(r)$1]} == $1) ]]; then;
    subcommand=$1
    shift

else;
    # No subcommand specified.  Use the default based on how we were called.
    if [[ $invoking_command = "apti" ]]; then
        subcommand="search"
    fi

    if [[ $invoking_command = "sapti" ]]; then
        subcommand="install"
    fi

    if [[ $invoking_command = $(basename $0:A) ]]; then
        echo "Please call this as either \`apti\` or \`sapti\`.  This is not designed to be called directly."
        usage
        exit
    fi

fi;

# Do we run with sudo?
if [[ $invoking_command = "apti" ]]; then
    command="aptitude"
fi

if [[ $invoking_command = "sapti" ]]; then

    # We're about to invoke a command which may prompt the user for their
    # password.  Explain why.
    echo "This command requires sudo permission"
    command=(sudo aptitude)
fi

# Invoking as 'sapti' with no params tries to do something.  WTF?
# Assemble and run the full command
$command $subcommand $standard_options $*
