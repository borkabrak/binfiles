#!/usr/bin/env ruby
#
#   Obfuscate text by shifting each consonant and vowel one consonant or
#   vowel to the right (e.g., 'english' becomes 'iphmotj').
#
#   Example:
#       a -> e  # next vowel
#       b -> c
#       c -> d
#       d -> f  # next consonant
#
#   In other words, it's a rotation cipher but where consonants and vowels stay
#   that way.  The idea is that it sort of preserves pronounceability.
#
#   Handles text as arguments or from STDIN.  Non-letters are ignored.
#
#   NOTE:  This is NOT any kind of secure crypto.  This is for fun.
#
#   TODO:
#       * characters without an encoding are unchanged, (not skipped)

class String

    def iphmotj(offset)

        encodings = [
            'bcdfghjklmnpqrstvwxz',
            'aeiouy',
            'BCDFGHJKLMNPQRSTVWXZ',
            'AEIOUY',
            '0123456789'
        ]

        self.split(//).map do |char|
            encodings.map do |list|
                index = list.index(char)
                list[( index + offset ) % list.length] if index
            end
        end.join("")

    end

end

# Convert command line to a single string because it's actually easier to parse
# options this way (eat that, perl)
arguments = ARGV.join(' ')

# Option:
#   -o <val>, --offset=<val>' - move each character <val> positions down
#
# This particular way of parsing the option seems hacky, but it does work at
# both catching the option's value and removing the entire option specification
# from the argument list.
offset = arguments.sub!(/(-o|--offset)[\s=]?(-?\d+)/,"") ? $2.to_i : 1

# The text to be encoded is either passed in as an argument or read from STDIN
# (if the argument list has no non-whitespace content)
plain = (arguments[/\S/] ? arguments : STDIN.gets )

# Finally, do what we came here to do.
puts plain.iphmotj offset
